pipeline {
    agent any

    tools{
        maven 'maven3'
    }

    environment {
        // we need to add sonarqube tool name
        SCANNER_HOME = tool 'sonarqube-scanner'
    }

    parameters {
      choice choices: ['create', 'stop'], description: 'we are stopping the containers to run new build again', name: 'stop containers'
    }


    stages {

        stage('clone'){
            when { expression { params.stop_containers == 'create' } }
            steps {
                git 'https://github.com/VootlaSaiCharan/java-cicd-argo.git'
            }
        }

        stage('maven compile'){
            when { expression { params.stop_containers == 'create' } }
            steps{
                script{
                    sh 'cd java-webapplication && mvn clean compile'
                }
            }
        }

        stage('Sonarqube analysis'){
            when { expression { params.stop_containers = 'create' } }
            steps{
                // insted of adding sonar credential provide the sonarserver name in that we have already configured the sonar credentials
                withSonarQubeEnv('sonar-server') {
                    sh ''' cd java-webapplication && $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Java-cicd-argo \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=Java-cicd-argo '''
                }
            }
        }

        stage('Creating a Image'){
            when { expression { params.stop_containers == 'create' } }
            steps{
                script {
                    // Define the Docker image tag using BUILD_NUMBER to create version tags like v1, v2, v3, etc.
                    def DOCKER_IMAGE = "vootlasaicharan/java-cicd-argo:${BUILD_NUMBER}"
                    
                    // Build the Docker image using the dynamic version
                    sh "cd java-webapplication && docker buildx build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        
        stage('Running Container'){
            expression { params.stop_containers == 'create' }
            steps {
                script {
                    // Define the Docker image tag using BUILD_NUMBER to create version tags like v1, v2, v3, etc.
                    def DOCKER_IMAGE = "vootlasaicharan/java-cicd-argo:${BUILD_NUMBER}"
                    
                    // Run the container using the created image
                    sh "docker run --rm -itd -p 80:8080 ${DOCKER_IMAGE}"
                }
            }
        }

        stage('stop container'){
            expression { params.stop_containers == 'stop' }
            steps{
                script{
                    sh "docker stop $(docker ps -aq)"
                }
            }
        }
    }
}